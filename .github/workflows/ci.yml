# Nome do seu workflow.
name: CI - Pipeline Completo da API

# Gatilhos: Roda em pushes e pull requests para as branches principais.
on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]

# Define os jobs que serão executados.
jobs:
  # -----------------------------------------------------------------
  # Job 1: Instala as dependências e as prepara para os outros jobs.
  # -----------------------------------------------------------------
  build:
    name: Build e Instalar Dependências
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache das dependências npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Instalar dependências com npm ci
        run: npm ci

      - name: Salvar dependências como artefato
        uses: actions/upload-artifact@v4
        with:
          name: node-modules-artifact
          path: node_modules/

  # -----------------------------------------------------------------
  # Job 2: Roda apenas os testes unitários.
  # -----------------------------------------------------------------
  unit-tests:
    name: Testes Unitários
    runs-on: ubuntu-latest
    needs: build # Depende do job 'build'.
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Baixar artefato de dependências
        uses: actions/download-artifact@v4
        with:
          name: node-modules-artifact
          path: node_modules

      - name: Dar permissão de execução ao Jest
        run: chmod +x ./node_modules/.bin/jest

      - name: Rodar testes unitários
        run: npx jest __tests__/unit/ --verbose

  # -----------------------------------------------------------------
  # Job 3: Roda os testes de integração.
  # -----------------------------------------------------------------
  integration-tests:
    name: Testes de Integração
    runs-on: ubuntu-latest
    needs: build # Depende do job 'build'.
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password_para_teste
          POSTGRES_DB: zoonoses_test_db
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Baixar artefato de dependências
        uses: actions/download-artifact@v4
        with:
          name: node-modules-artifact
          path: node_modules

      - name: Dar permissão de execução ao Jest
        run: chmod +x ./node_modules/.bin/jest

      - name: Rodar testes de integração
        env:
          NODE_ENV: test
          CI: true
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_NAME: zoonoses_test_db
          DB_PASS: postgres
          APP_SECRET: segredo_para_testes_no_ci
        run: npx jest __tests__/integration/ --runInBand --verbose

  # -----------------------------------------------------------------
  # Job 4: Tenta construir a imagem Docker se todos os testes passarem.
  # -----------------------------------------------------------------
  docker-build:
    name: Build da Imagem Docker
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests] # Depende de ambos os testes.
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build da imagem Docker
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: zoonoses-api:test-build
